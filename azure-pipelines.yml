trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      - '**'
    exclude:
      - Platforms/**
      - '!Platforms/Android/**'

pr:
  branches:
    include:
      - main
      - master
      - release/*
      - feature/*
  paths:
    include:
      - '**'
      - Platforms/Android/**
    exclude:
      - Platforms/iOS/**

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  AndroidSdkVersion: '34.0'
  SemanticVersion: '1.0'

steps:
- checkout: self
  clean: true
  fetchDepth: 0

- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '9.x'

- script: |
    dotnet new tool-manifest --force
    dotnet tool install GitVersion.Tool --version 6.3.0
    dotnet tool list
  displayName: 'Install GitVersion'

- script: |
    dotnet tool run dotnet-gitversion /output json /verbosity quiet > $(Build.SourcesDirectory)\gitversion.json 2> $(Build.SourcesDirectory)\gitversion-error.log
  displayName: 'Run GitVersion'

- task: PowerShell@2
  displayName: 'Set GitVersion-based Build Number'
  inputs:
    targetType: 'inline'
    script: |
      $gitVersion = Get-Content 'gitversion.json' | ConvertFrom-Json
      $baseVersion = $gitVersion.SemVer.Split('-')[0]
      $buildId = "$(Build.BuildId)".Replace('.','')
      $semVerParts = $baseVersion.TrimStart('v').Split('.')
      $major = $semVerParts[0]
      $minor = $semVerParts[1]
      $semVer = "$major.$minor.$buildId"

      Write-Host "##vso[build.updatebuildnumber]$semVer"
      Write-Host "##vso[task.setvariable variable=SemVer]$semVer"
      Write-Host "##vso[task.setvariable variable=AndroidVersionCode]$buildId"
      Write-Host "##vso[task.setvariable variable=AssemblyVersion]$semVer"

- script: |
    dotnet workload install maui-android
  displayName: 'Install .NET MAUI Android Workload'

- script: |
    echo "Installing Android SDK..."
    choco install android-sdk -y
    refreshenv

    set ANDROID_SDK_ROOT=C:\Android\android-sdk
    set CMDLINE_TOOLS_DIR=%ANDROID_SDK_ROOT%\cmdline-tools\latest
    mkdir %CMDLINE_TOOLS_DIR%

    curl -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-win-11076708_latest.zip
    tar -xf cmdline-tools.zip -C %CMDLINE_TOOLS_DIR% --strip-components=1

    set PATH=%CMDLINE_TOOLS_DIR%\bin;%PATH%
    sdkmanager.bat "platform-tools" "platforms;android-$(AndroidSdkVersion)" "build-tools;$(AndroidSdkVersion)" --sdk_root=%ANDROID_SDK_ROOT%
  displayName: 'Install Android SDK and cmdline-tools'

- script: |
    choco install openjdk11 -y
  displayName: 'Install JDK 11'

- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'

- task: MSBuild@1
  displayName: 'Build APK'
  inputs:
    solution: 'Location.Core\Location.Core.csproj'
    msbuildArguments: '/p:Configuration=$(BuildConfiguration) /p:AndroidPackageFormat=apk /p:Version=$(AssemblyVersion)'
    configuration: '$(BuildConfiguration)'

- task: MSBuild@1
  displayName: 'Build AAB'
  inputs:
    solution: 'Location.Core\Location.Core.csproj'
    msbuildArguments: '/p:Configuration=$(BuildConfiguration) /p:AndroidPackageFormat=aab /p:Version=$(AssemblyVersion)'
    configuration: '$(BuildConfiguration)'

# Copy APK
- task: CopyFiles@2
  displayName: 'Copy APK to staging directory'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/*.apk'
    targetFolder: '$(Build.ArtifactStagingDirectory)\apk'

# Copy AAB
- task: CopyFiles@2
  displayName: 'Copy AAB to staging directory'
  inputs:
    sourceFolder: '$(Build.SourcesDirectory)'
    contents: '**/*.aab'
    targetFolder: '$(Build.ArtifactStagingDirectory)\aab'

# Upload APK
- task: AzureCLI@2
  displayName: 'Upload APK to Azure Artifacts Feed'
  inputs:
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az devops configure --defaults organization=https://dev.azure.com/3squaredcircles
      az devops login --organization https://dev.azure.com/3squaredcircles --only-show-errors --use-device-code
      $env:AZURE_DEVOPS_EXT_PAT="$(MY_PAT)"
      $apk = Get-ChildItem "$(Build.ArtifactStagingDirectory)\apk" -Filter *.apk | Select-Object -First 1
      az artifacts universal publish `
        --feed apk `
        --name PixMap `
        --version $(AssemblyVersion) `
        --description "APK build for PixMap" `
        --path $apk.FullName

# Upload AAB
- task: AzureCLI@2
  displayName: 'Upload AAB to Azure Artifacts Feed'
  inputs:
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az devops configure --defaults organization=https://dev.azure.com/3squaredcircles
      $env:AZURE_DEVOPS_EXT_PAT="$(MY_PAT)"
      $aab = Get-ChildItem "$(Build.ArtifactStagingDirectory)\aab" -Filter *.aab | Select-Object -First 1
      az artifacts universal publish `
        --feed aab `
        --name PixMap `
        --version $(AssemblyVersion) `
        --description "AAB build for PixMap" `
        --path $aab.FullName

trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      - '**'
    exclude:
      - Platforms/**
      - '!Platforms/Android/**'

pr:
  branches:
    include:
      - main
      - master
      - release/*
      - feature/*
  paths:
    include:
      - '**'
      - Platforms/Android/**
    exclude:
      - Platforms/iOS/**

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  AndroidSdkVersion: '34.0'
  SemanticVersion: '1.0'

jobs:
- job: SetVersionAndBuild
  displayName: 'Set Version and Build APK/AAB'
  variables:
    SemVer: $[counter(variables['Build.SourceBranchName'], 1)]  # Incremental versioning
  steps:
  - checkout: self
    clean: true
    fetchDepth: 0

  - task: UseDotNet@2
    displayName: 'Install .NET SDK'
    inputs:
      packageType: 'sdk'
      version: '9.x'

  - script: |
      dotnet new tool-manifest --force
      dotnet tool install GitVersion.Tool --version 6.3.0
      dotnet tool list
    displayName: 'Install GitVersion'

  - script: |
      dotnet tool run dotnet-gitversion /output json /verbosity quiet > $(Build.SourcesDirectory)\gitversion.json 2> $(Build.SourcesDirectory)\gitversion-error.log
    displayName: 'Run GitVersion'

  - task: PowerShell@2
    displayName: 'Set GitVersion-based Build Number'
    inputs:
      targetType: 'inline'
      script: |
        $gitVersion = Get-Content 'gitversion.json' | ConvertFrom-Json
        $baseVersion = $gitVersion.SemVer.Split('-')[0]
        $buildId = "$(Build.BuildId)".Replace('.','')
        $semVerParts = $baseVersion.TrimStart('v').Split('.')
        $major = $semVerParts[0]
        $minor = $semVerParts[1]
        $semVer = "$major.$minor.$buildId"

        Write-Host "##vso[build.updatebuildnumber]$semVer"
        Write-Host "##vso[task.setvariable variable=SemVer;isOutput=true]$semVer"
        Write-Host "##vso[task.setvariable variable=AndroidVersionCode;isOutput=true]$buildId"
        Write-Host "##vso[task.setvariable variable=AssemblyVersion;isOutput=true]$semVer"

  - script: |
      dotnet workload install maui-android
    displayName: 'Install .NET MAUI Android Workload'

  - script: |
      echo "Installing Android SDK..."
      choco install android-sdk -y
      refreshenv

      set ANDROID_SDK_ROOT=C:\Android\android-sdk
      set CMDLINE_TOOLS_DIR=%ANDROID_SDK_ROOT%\cmdline-tools\latest
      mkdir %CMDLINE_TOOLS_DIR%

      curl -o cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-win-11076708_latest.zip
      tar -xf cmdline-tools.zip -C %CMDLINE_TOOLS_DIR% --strip-components=1

      set PATH=%CMDLINE_TOOLS_DIR%\bin;%PATH%
      sdkmanager.bat "platform-tools" "platforms;android-$(AndroidSdkVersion)" "build-tools;$(AndroidSdkVersion)" --sdk_root=%ANDROID_SDK_ROOT%
    displayName: 'Install Android SDK and cmdline-tools'

  - script: |
      choco install openjdk11 -y
    displayName: 'Install JDK 11'

  - task: NuGetCommand@2
    displayName: 'Restore NuGet Packages'
    inputs:
      command: 'restore'
      restoreSolution: '**/*.sln'

- job: BuildAndPublishApk
  displayName: 'Build, Sign, and Publish APK'
  dependsOn: SetVersionAndBuild
  variables:
    AssemblyVersion: $[dependencies.SetVersionAndBuild.outputs['SemVer']]

  steps:
  - task: MSBuild@1
    displayName: 'Build Unsigned APK'
    inputs:
      solution: '**/Location.Core.csproj'
      msbuildArguments: '/p:Configuration=$(BuildConfiguration) /p:AndroidPackageFormat=apk'
      configuration: '$(BuildConfiguration)'

  - script: |
      echo "Listing files in output directory..."
      dir $(Build.SourcesDirectory)\Location.Core\bin\$(BuildConfiguration)\net9.0-android\
    displayName: 'List Files in Build Output Directory'

  - task: DownloadSecureFile@1
    displayName: 'Download Keystore File'
    inputs:
      secureFile: 'pixmap-release.keystore'

  - script: |
      jarsigner -verbose ^
        -keystore "$(Agent.TempDirectory)\pixmap-release.keystore" ^
        -storepass "$(KeystorePassword)" ^
        -keypass "$(KeyPassword)" ^
        -signedjar "$(Build.ArtifactStagingDirectory)\com.x3squaredcircles.locations-Signed-$(Build.BuildId).apk" ^
        "$(Build.SourcesDirectory)\Location.Core\bin\$(BuildConfiguration)\net9.0-android\com.x3squaredcircles.locations.apk" ^
        $(KeyAlias)
    displayName: 'Sign APK'
    env:
      KeystorePassword: $(KeystorePassword)
      KeyPassword: $(KeyPassword)
      KeyAlias: $(KeyAlias)

  - task: CopyFiles@2
    displayName: 'Copy Signed APK to Artifact Staging Directory'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/Location.Core/bin/Release/net9.0-android'
      Contents: 'com.x3squaredcircles.locations-Signed.apk'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: UniversalPackages@0
    displayName: 'Publish Signed APK to Azure Artifacts'
    inputs:
      command: publish
      publishDirectory: '$(Build.ArtifactStagingDirectory)'
      vstsFeedPublish: 'Photography Locations/apk'
      vstsFeedPackagePublish: 'com.x3squaredcircles.locations'

- job: BuildAndPublishAab
  displayName: 'Build, Sign, and Publish AAB'
  dependsOn: SetVersionAndBuild
  variables:
    AssemblyVersion: $[dependencies.SetVersionAndBuild.outputs['SemVer']]

  steps:
  - task: MSBuild@1
    displayName: 'Build Unsigned AAB'
    inputs:
      solution: '**/Location.Core.csproj'
      msbuildArguments: '/p:Configuration=$(BuildConfiguration) /p:AndroidPackageFormat=aab'
      configuration: '$(BuildConfiguration)'

  - script: |
      echo "Listing files in output directory..."
      dir $(Build.SourcesDirectory)\Location.Core\bin\$(BuildConfiguration)\net9.0-android\
    displayName: 'List Files in Build Output Directory'

  - task: DownloadSecureFile@1
    displayName: 'Download Keystore File'
    inputs:
      secureFile: 'pixmap-release.keystore'

  - script: |
      jarsigner -verbose ^
        -keystore "$(Agent.TempDirectory)\pixmap-release.keystore" ^
        -storepass "$(KeystorePassword)" ^
        -keypass "$(KeyPassword)" ^
        -signedjar "$(Build.ArtifactStagingDirectory)\com.x3squaredcircles.locations-Signed-$(Build.BuildId).aab" ^
        "$(Build.SourcesDirectory)\Location.Core\bin\$(BuildConfiguration)\net9.0-android\com.x3squaredcircles.locations.aab" ^
        $(KeyAlias)
    displayName: 'Sign AAB'
    env:
      KeystorePassword: $(KeystorePassword)
      KeyPassword: $(KeyPassword)
      KeyAlias: $(KeyAlias)

  - task: CopyFiles@2
    displayName: 'Copy Signed AAB to Artifact Staging Directory'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/Location.Core/bin/Release/net9.0-android'
      Contents: 'com.x3squaredcircles.locations-Signed.aab'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: UniversalPackages@0
    displayName: 'Publish Signed AAB to Azure Artifacts'
    inputs:
      command: publish
      publishDirectory: '$(Build.ArtifactStagingDirectory)'
      vstsFeedPublish: 'Photography Locations/aab'
      vstsFeedPackagePublish: 'com.x3squaredcircles.locations'

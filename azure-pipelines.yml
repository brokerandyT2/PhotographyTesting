trigger:
  branches:
    include:
      - '*'
  paths:
    include:
      - '**' # Include everything
    exclude:
      - Platforms/** # Exclude everything under Platforms
      - '!Platforms/Android/**' # Re-include only Platforms/Android

pool:
  vmImage: 'windows-latest'

variables:
  BuildConfiguration: 'Release'
  AndroidSdkVersion: '34.0'
  SemanticVersion: '1.0' # Default version, will be overridden by git tag if available

steps:
# Step 1: Install .NET SDK
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '9.0'

# Step 2: Install GitVersion.Tool and Generate Version Information
- script: |
    dotnet new tool-manifest --force
    dotnet tool install GitVersion.Tool --version 6.3.0
    dotnet tool run dotnet-gitversion /output json /verbosity quiet > gitversion.json
  displayName: 'Install GitVersion.Tool and Generate Version Information'

# Step 3: Parse GitVersion JSON Output
- task: PowerShell@2
  name: SetGitVersionVars
  displayName: 'Set GitVersion-based Build Number'
  inputs:
            targetType: 'inline'
            script: |
              $gitVersion = Get-Content 'gitversion.json' | ConvertFrom-Json
              $semVerRaw = $gitVersion.SemVer
              $semVerParts = $semVerRaw -split '\.'
              $major = $semVerParts[0]
              $minor = $semVerParts[1]
              $buildId = "$(Build.BuildId)"
              $semVer = "$major.$minor.$buildId"
              $assemblySemVer = $semVer
              $androidVersionCode = "$(Build.BuildNumber)$(Build.BuildId)".Replace('.', '')

              Write-Host "##vso[build.updatebuildnumber]$semVer"
              Write-Host "##vso[task.setvariable variable=SemVer;isOutput=true]$semVer"
              Write-Host "##vso[task.setvariable variable=AssemblySemVer;isOutput=true]$assemblySemVer"
              Write-Host "##vso[task.setvariable variable=AndroidVersionCode;isOutput=true]$androidVersionCode"


# Step 4: Install .NET MAUI Android Workload
- script: |
    dotnet workload install maui-android
  displayName: 'Install .NET MAUI Android Workload'

# Step 5: Install Android SDK
- script: |
    echo "Installing Android SDK..."
    choco install android-sdk -y
    sdkmanager "platforms;android-$(AndroidSdkVersion)" "build-tools;$(AndroidSdkVersion)"
  displayName: 'Install Android SDK'

# Step 6: Install JDK
- script: |
    choco install openjdk11 -y
  displayName: 'Install JDK 11'

# Step 7: Create Azure Artifacts Feeds if they do not exist
- powershell: |
    $feeds = "APK,AAB".Split(',')
    $personalAccessToken = "$(System.AccessToken)"
    $headers = @{
        Authorization = "Bearer $personalAccessToken"
        "Content-Type" = "application/json"
    }

    foreach ($feed in $feeds) {
        $url = "$(OrganizationUrl)/$(ProjectName)/_apis/packaging/feeds/$feed?api-version=6.0-preview.1"
        $response = Invoke-RestMethod -Uri $url -Headers $headers -Method Get -ErrorAction SilentlyContinue

        if (-not $response) {
            Write-Host "Feed '$feed' does not exist. Creating it..."
            $createFeedUrl = "$(OrganizationUrl)/$(ProjectName)/_apis/packaging/feeds?api-version=6.0-preview.1"
            $body = @{
                name = $feed
                capabilities = @{
                    permissions = @()
                }
            } | ConvertTo-Json -Depth 10
            Invoke-RestMethod -Uri $createFeedUrl -Headers $headers -Method Post -Body $body
            Write-Host "Feed '$feed' created successfully."
        } else {
            Write-Host "Feed '$feed' already exists."
        }
    }
  displayName: 'Ensure Azure Artifacts Feeds Exist'
  env:
    System.AccessToken: $(System.AccessToken)

# Step 8: Restore NuGet packages
- task: NuGetCommand@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    restoreSolution: '**/*.sln'

# Step 9: Build APK
- task: MSBuild@1
  displayName: 'Build APK'
  inputs:
    solution: '**/*.sln'
    msbuildArguments: '/p:Configuration=$(BuildConfiguration) /p:Platform=AnyCPU /p:AndroidPackageFormat=apk /p:Version=$(AssemblyVersion)'
    configuration: '$(BuildConfiguration)'

# Step 10: Build AAB
- task: MSBuild@1
  displayName: 'Build AAB'
  inputs:
    solution: '**/*.sln'
    msbuildArguments: '/p:Configuration=$(BuildConfiguration) /p:Platform=AnyCPU /p:AndroidPackageFormat=aab /p:Version=$(AssemblyVersion)'
    configuration: '$(BuildConfiguration)'

# Step 11: Publish APK to Azure Artifacts
- task: PublishPipelineArtifact@1
  displayName: 'Publish APK to Azure Artifacts'
  inputs:
    targetPath: '$(Build.SourcesDirectory)/bin/$(BuildConfiguration)/net9.0-android/*.apk'
    artifact: 'APK'

# Step 12: Publish AAB to Azure Artifacts
- task: PublishPipelineArtifact@1
  displayName: 'Publish AAB to Azure Artifacts'
  inputs:
    targetPath: '$(Build.SourcesDirectory)/bin/$(BuildConfiguration)/net9.0-android/*.aab'
    artifact: 'AAB'


variables:
  buildConfiguration: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/drop'
  androidSdkVersion: '35'
  androidHome: '$(Agent.ToolsDirectory)/android-sdk'
  javaHome: 'C:\Java\OpenJDK11'

trigger:
  branches:
    include:
      - main
      - master
      - feature/*
      - release/*
  paths:
    exclude:
      - Location.Core/Platforms/iOS/*  

pr:
  branches:
    include:
      - main
      - master
      - feature/*
      - release/*
  paths:
    exclude:
      - Location.Core/Platforms/iOS/*

pool:
  vmImage: 'windows-latest'

stages:
# Stage 1 - VERSIONING
- stage: Versioning
  jobs:
    - job: GitVersion
      steps:
        - checkout: self
          fetchDepth: 0

        # Install and run GitVersion to generate versioning info
        - script: |
            dotnet new tool-manifest --force
            dotnet tool install GitVersion.Tool --version 6.3.0
            dotnet tool run dotnet-gitversion /output json /verbosity quiet > gitversion.json
          displayName: 'Install and Run GitVersion'

        # Set versioning variables based on GitVersion output
        - task: PowerShell@2
          displayName: 'Set GitVersion-based Build Number'
          inputs:
            targetType: 'inline'
            script: |
                      # PowerShell script to read GitVersion output
                      $gitVersion = Get-Content 'gitversion.json' | ConvertFrom-Json
                      $semVer = $gitVersion.SemVer
                      $assemblySemVer = $gitVersion.AssemblySemVer
                      $androidVersionCode = "$(Build.BuildNumber)$(Build.BuildId)"

                      # Set Azure DevOps variables
                      Write-Host "##vso[build.updatebuildnumber]$semVer"
                      Write-Host "##vso[task.setvariable variable=SemVer]$semVer"
                      Write-Host "##vso[task.setvariable variable=AssemblySemVer]$assemblySemVer"
                      Write-Host "##vso[task.setvariable variable=AndroidVersionCode]$androidVersionCode"

                      # Output for debugging
                      Write-Host "SemVer=$semVer"
                      Write-Host "AssemblySemVer=$assemblySemVer"
                      Write-Host "AndroidVersionCode=$androidVersionCode"

# Stage 2 - SETUP
- stage: Setup
  dependsOn: Versioning
  jobs:
    - job: EnvironmentSetup
      steps:
        - checkout: self

        # Install .NET SDK 9.x
        - task: UseDotNet@2
          displayName: 'Install .NET SDK 9.x'
          inputs:
            version: '9.x'
            includePreviewVersions: true

        # Install OpenJDK 11
        - task: PowerShell@2
          displayName: 'Install OpenJDK 11'
          inputs:
            targetType: 'inline'
            script: |
              $jdkUrl = "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21+9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.msi"
              $installerPath = "$env:TEMP\openjdk11.msi"
              Invoke-WebRequest -Uri $jdkUrl -OutFile $installerPath
              Start-Process msiexec.exe -Wait -ArgumentList "/i `"$installerPath`" INSTALLDIR=`"$(javaHome)`" /quiet /qn /norestart"
              Write-Host "##vso[task.setvariable variable=JAVA_HOME]$(javaHome)"

        # Install Android SDK and accept licenses
        - task: PowerShell@2
          displayName: 'Install Android SDK and Accept Licenses'
          inputs:
            targetType: 'inline'
            script: |
              $sdkRoot = "$(androidHome)"
              $toolsUrl = "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip"
              $zipPath = "$sdkRoot\cmdline-tools.zip"
              $extractTemp = "$sdkRoot\temp"
              $finalToolsDir = "$sdkRoot\cmdline-tools\latest"

              # Download and extract command-line tools
              New-Item -ItemType Directory -Force -Path $sdkRoot | Out-Null
              Invoke-WebRequest -Uri $toolsUrl -OutFile $zipPath
              Expand-Archive -Path $zipPath -DestinationPath $extractTemp -Force
              New-Item -ItemType Directory -Force -Path $finalToolsDir | Out-Null
              Copy-Item "$extractTemp\cmdline-tools\*" -Destination $finalToolsDir -Recurse -Force
              Remove-Item $extractTemp -Recurse -Force
              Remove-Item $zipPath -Force

              Write-Host "##vso[task.setvariable variable=ANDROID_HOME]$sdkRoot"
              Write-Host "##vso[task.setvariable variable=PATH]$sdkRoot\platform-tools;$sdkRoot\cmdline-tools\latest\bin;$env:PATH"

              # Accept SDK licenses and install necessary components
              & "$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat" --licenses --sdk_root="$sdkRoot"
              & "$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat" --sdk_root="$sdkRoot" "platform-tools" "platforms;android-$(androidSdkVersion)" "build-tools;34.0.0" "emulator"

        # Restore and install .NET MAUI workloads
        - task: DotNetCoreCLI@2
          displayName: 'Restore and Install MAUI Workloads'
          inputs:
            command: 'custom'
            custom: 'workload'
            arguments: 'restore install maui maui-android'

# Stage 3 - BUILD
- stage: Build
  dependsOn: Setup
  jobs:
    - job: BuildApkAndAab
      steps:
        - checkout: self

        # Restore NuGet packages for the solution
        - task: NuGetCommand@2
          displayName: 'Restore NuGet Packages'
          inputs:
            restoreSolution: 'Photography.sln'

        # Build APK
        - task: DotNetCoreCLI@2
          displayName: 'Build APK'
          inputs:
            command: 'build'
            projects: '**/Location.Core.csproj'
            arguments: >
              -f net9.0-android
              -p:Configuration=$(buildConfiguration)
              -p:OutputPath=$(outputDir)-apk
              -p:Version=$(SemVer)
              -p:AssemblySemVer=$(AssemblySemVer)
              -p:FileVersion=$(AssemblySemVer)
              -p:InformationalVersion=$(SemVer)
              -p:AndroidVersionCode=$(AndroidVersionCode)
          env:
            ANDROID_HOME: $(ANDROID_HOME)
            JAVA_HOME: $(JAVA_HOME)
            PATH: $(PATH)

        # Build AAB
        - task: DotNetCoreCLI@2
          displayName: 'Build AAB'
          inputs:
            command: 'build'
            projects: '**/Location.Core.csproj'
            arguments: >
              -f net9.0-android
              -p:Configuration=$(buildConfiguration)
              -p:OutputPath=$(outputDir)-aab
              -p:AndroidPackageFormat=aab
              -p:Version=$(SemVer)
              -p:AssemblySemVer=$(AssemblySemVer)
              -p:FileVersion=$(AssemblySemVer)
              -p:InformationalVersion=$(SemVer)
              -p:AndroidVersionCode=$(AndroidVersionCode)
          env:
            ANDROID_HOME: $(ANDROID_HOME)
            JAVA_HOME: $(JAVA_HOME)
            PATH: $(PATH)

# Stage 4 - PUBLISH
- stage: Publish
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: PublishArtifacts
      steps:
        # Push APK to Azure Artifacts Feed
        - script: |
            echo "Pushing APK to Azure Artifacts Feed (apks)..."
            az artifacts universal publish --organization https://dev.azure.com/$(organization) --feed $(apksFeed) --package-name location-core-apk --package-version $(SemVer) --path $(outputDir)-apk
          displayName: 'Push APK to apks Feed'

        # Push AAB to Azure Artifacts Feed
        - script: |
            echo "Pushing AAB to Azure Artifacts Feed (aabs)..."
            az artifacts universal publish --organization https://dev.azure.com/$(organization) --feed $(aabsFeed) --package-name location-core-aab --package-version $(SemVer) --path $(outputDir)-aab
          displayName: 'Push AAB to aabs Feed'

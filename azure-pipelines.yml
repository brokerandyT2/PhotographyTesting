trigger:
  branches:
    include:
      - master
      - main
      - feature/*
      - release/*

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)/drop'
  CI: true

stages:
- stage: Build
  jobs:
  - job: Build_MAUI
    pool:
      vmImage: 'windows-latest'

    steps:
    - checkout: self
      fetchDepth: 0

    - task: UseDotNet@2
      displayName: 'Install .NET SDK 9.x'
      inputs:
        version: '9.x'
        includePreviewVersions: true

    - task: PowerShell@2
      displayName: 'Install and Run GitVersion'
      inputs:
        targetType: 'inline'
        script: |
          # Install and run GitVersion
          dotnet new tool-manifest --force
          dotnet tool install GitVersion.Tool --version 6.3.0
          $gitVersionOutput = dotnet tool run dotnet-gitversion /output json /verbosity quiet 2>&1
          $gitVersionOutput | Out-File -FilePath gitversion.log -Encoding utf8
          $gitVersionOutput | ConvertFrom-Json | Out-File -FilePath gitversion.json -Encoding utf8

          # Log the output for debugging
          Write-Host "GitVersion output file content:"
          Get-Content gitversion.json
          Write-Host "GitVersion log content:"
          Get-Content gitversion.log

    - task: PowerShell@2
      displayName: 'Parse GitVersion and Set Variables'
      inputs:
        targetType: 'inline'
        script: |
          try {
              # Check the contents of the json file for debugging
              $gitVersionContent = Get-Content 'gitversion.json' -Raw
              Write-Host "GitVersion JSON content:"
              Write-Host $gitVersionContent

              # Parse GitVersion output
              $gitVersion = $gitVersionContent | ConvertFrom-Json
              
              # Extract versioning information
              $semver = $gitVersion.SemVer
              $assemblyVer = $gitVersion.AssemblySemVer
              $fileVer = $gitVersion.AssemblySemFileVer
              $infoVer = $gitVersion.InformationalVersion

              # Set the build number and GitVersion variables
              Write-Host "##vso[build.updatebuildnumber]$semver"
              Write-Host "##vso[task.setvariable variable=GitVersion_SemVer]$semver"
              Write-Host "##vso[task.setvariable variable=GitVersion_AssemblySemVer]$assemblyVer"
              Write-Host "##vso[task.setvariable variable=GitVersion_AssemblySemFileVer]$fileVer"
              Write-Host "##vso[task.setvariable variable=GitVersion_InformationalVersion]$infoVer"
          } catch {
              Write-Error "Failed to parse GitVersion output: $_"
              exit 1
          }

    - script: |
        echo "Current directory: %CD%"
        dir
        dotnet new tool-manifest --force
        dotnet tool install GitVersion.Tool --version 6.3.0
        dotnet tool list
        dotnet tool run dotnet-gitversion /output json /verbosity quiet > gitversion.json 2> gitversion.log
        echo "GitVersion output file content:"
        type gitversion.json
        cat gitversion.json
        echo "GitVersion log content:"
        type gitversion.log
      workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Install and Run GitVersion'

    - task: PowerShell@2
      displayName: 'Update Build Number from GitVersion with Default Value'
      inputs:
        targetType: 'inline'
        script: |
          $gitVersion = Get-Content 'gitversion.json' | ConvertFrom-Json
          if ($gitVersion -and $gitVersion.SemVer) {
              $semver = $gitVersion.SemVer
          } else {
              $semver = '0.5.0'
              Write-Host "GitVersion output is invalid or missing. Using default version: $semver"
          }
          Write-Host "Setting build number to $semver"
          Write-Host "##vso[build.updatebuildnumber]$semver"
          Write-Host "##vso[task.setvariable variable=GitVersion_SemVer]$semver"

    - script: |
        echo "Using GitVersion: $(GitVersion_SemVer)"
      displayName: 'Confirm Build Number'

    - script: |
        dotnet workload restore
      displayName: 'Restore Workloads'

    - script: |
        dotnet workload install maui-ios maccatalyst
      displayName: 'Install MAUI iOS Workload'

    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: '**/*.sln'
        feedsToUse: 'select'

    - task: VSBuild@1
      displayName: 'Build MAUI Solution'
      inputs:
        solution: 'Photography.sln'
        configuration: '$(buildConfiguration)'
        msbuildArgs: '-p:ContinuousIntegrationBuild=true -p:Version=$(GitVersion_SemVer)'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration Release --no-build'
      continueOnError: true

    - task: DotNetCoreCLI@2
      displayName: 'Publish MAUI App'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/Location.Core.csproj'
        arguments: '--framework net9.0-android35.0 --configuration Release --output $(outputDir) -p:Version=$(GitVersion_SemVer)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(outputDir)'
        ArtifactName: 'drop'

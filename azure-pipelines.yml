variables:
  buildConfiguration: 'Release'
  outputDir: '$(Build.ArtifactStagingDirectory)\drop'
  androidSdkVersion: '35'
  androidHome: '$(Agent.ToolsDirectory)\android-sdk'
  javaHome: 'C:\Java\OpenJDK11'

trigger:
  branches:
    include:
      - main
      - master
      - feature/*
      - release/*
  paths:
    exclude:
      - Location.Core/Platforms/iOS/*

pr:
  branches:
    include:
      - main
      - master
      - feature/*
      - release/*
  paths:
    exclude:
      - Location.Core/Platforms/iOS/*

pool:
  vmImage: 'windows-latest'

stages:

# Stage 1 - VERSIONING
- stage: Versioning
  jobs:
    - job: GitVersion
      steps:
        - checkout: self
          fetchDepth: 0
        - script: |
            echo "organization=$(organization)"
            echo "apksFeed=$(apksFeed)"
            echo "SemVer=$(SemVer)"
            echo "outputDir=$(outputDir)-apk"
          displayName: 'Debug output variables'

        - script: |
            dotnet new tool-manifest --force
            dotnet tool install GitVersion.Tool --version 6.3.0
            dotnet tool run dotnet-gitversion /output json /verbosity quiet > gitversion.json
          displayName: 'Install and Run GitVersion'

        - task: PowerShell@2
          name: SetGitVersionVars
          displayName: 'Set GitVersion-based Build Number'
          inputs:
            targetType: 'inline'
            script: |
              $gitVersion = Get-Content 'gitversion.json' | ConvertFrom-Json
              $semVerRaw = $gitVersion.SemVer
              $semVerParts = $semVerRaw -split '\.'
              $major = $semVerParts[0]
              $minor = $semVerParts[1]
              $buildId = "$(Build.BuildId)"
              $semVer = "$major.$minor.$buildId"
              $assemblySemVer = $semVer
              $androidVersionCode = "$(Build.BuildNumber)$(Build.BuildId)".Replace('.', '')

              Write-Host "##vso[build.updatebuildnumber]$semVer"
              Write-Host "##vso[task.setvariable variable=SemVer;isOutput=true]$semVer"
              Write-Host "##vso[task.setvariable variable=AssemblySemVer;isOutput=true]$assemblySemVer"
              Write-Host "##vso[task.setvariable variable=AndroidVersionCode;isOutput=true]$androidVersionCode"
        - task: PowerShell@2
          displayName: "Print Debug Variables"
          inputs:
            targetType: inline
            script: |
              Write-Host "##[group]Build Variables"
              Write-Host "Build.ArtifactStagingDirectory: $env:BUILD_ARTIFACTSTAGINGDIRECTORY"
              Write-Host "Build.BuildId: $env:BUILD_BUILDID"
              Write-Host "Build.BuildNumber: $env:BUILD_BUILDNUMBER"
              Write-Host "Build.SourceBranch: $env:BUILD_SOURCEBRANCH"
              Write-Host "System.DefaultWorkingDirectory: $env:SYSTEM_DEFAULTWORKINGDIRECTORY"
              Write-Host "System.ArtifactsDirectory: $env:SYSTEM_ARTIFACTSDIRECTORY"
              Write-Host "##[endgroup]"

              Write-Host "##[group]GitVersion Variables"
              Write-Host "GitVersion.SemVer: $env:GitVersion_SemVer"
              Write-Host "GitVersion.MajorMinorPatch: $env:GitVersion_MajorMinorPatch"
              Write-Host "GitVersion.FullSemVer: $env:GitVersion_FullSemVer"
              Write-Host "GitVersion.BuildMetaData: $env:GitVersion_BuildMetaData"
              Write-Host "##[endgroup]"
# Stage 2 - SETUP
- stage: Setup
  dependsOn: Versioning
  variables:
    SemVer: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.SemVer']]
    AssemblySemVer: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.AssemblySemVer']]
    AndroidVersionCode: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.AndroidVersionCode']]
  jobs:
    - job: EnvironmentSetup
      steps:
        - checkout: self
        - task: PowerShell@2
          displayName: 'Validate Semver'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "##vso[task.setvariable variable=SemVer;isOutput=true]$semVer"
              Write-Host "##vso[task.setvariable variable=AssemblySemVer;isOutput=true]$assemblySemVer"
              Write-Host "##vso[task.setvariable variable=AndroidVersionCode;isOutput=true]$androidVersionCode"
        - task: PowerShell@2
          displayName: 'Show GitVersion Variables'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "SemVer=$(SemVer)"
              Write-Host "AssemblySemVer=$(AssemblySemVer)"
              Write-Host "AndroidVersionCode=$(AndroidVersionCode)"
        - task: UseDotNet@2
          displayName: 'Install .NET SDK 9.x'
          inputs:
            version: '9.x'
            includePreviewVersions: true

        - task: PowerShell@2
          displayName: 'Install OpenJDK 11'
          inputs:
            targetType: 'inline'
            script: |
              $jdkUrl = "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.21+9/OpenJDK11U-jdk_x64_windows_hotspot_11.0.21_9.msi"
              $installerPath = "$env:TEMP\openjdk11.msi"
              Invoke-WebRequest -Uri $jdkUrl -OutFile $installerPath
              Start-Process msiexec.exe -Wait -ArgumentList "/i `"$installerPath`" INSTALLDIR=`"$(javaHome)`" /quiet /qn /norestart"
              Write-Host "##vso[task.setvariable variable=JAVA_HOME]$(javaHome)"

        - task: PowerShell@2
          displayName: 'Install Android SDK and Accept Licenses'
          inputs:
            targetType: 'inline'
            script: |
              $sdkRoot = "$(androidHome)"
              $toolsUrl = "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip"
              $zipPath = "$sdkRoot\cmdline-tools.zip"
              $extractTemp = "$sdkRoot\temp"
              $finalToolsDir = "$sdkRoot\cmdline-tools\latest"

              New-Item -ItemType Directory -Force -Path $sdkRoot | Out-Null
              Invoke-WebRequest -Uri $toolsUrl -OutFile $zipPath
              Expand-Archive -Path $zipPath -DestinationPath $extractTemp -Force
              New-Item -ItemType Directory -Force -Path $finalToolsDir | Out-Null
              Copy-Item "$extractTemp\cmdline-tools\*" -Destination $finalToolsDir -Recurse -Force
              Remove-Item $extractTemp -Recurse -Force
              Remove-Item $zipPath -Force

              Write-Host "##vso[task.setvariable variable=ANDROID_HOME]$sdkRoot"
              Write-Host "##vso[task.setvariable variable=PATH]$sdkRoot\platform-tools;$sdkRoot\cmdline-tools\latest\bin;$env:PATH"

              & "$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat" --licenses --sdk_root="$sdkRoot"
              & "$sdkRoot\cmdline-tools\latest\bin\sdkmanager.bat" --sdk_root="$sdkRoot" "platform-tools" "platforms;android-$(androidSdkVersion)" "build-tools;34.0.0" "emulator"
          env:
            ANDROID_HOME: $(ANDROID_HOME)
            JAVA_HOME: $(JAVA_HOME)
            PATH: $(PATH)

        - task: DotNetCoreCLI@2
          displayName: 'Restore MAUI Workloads'
          inputs:
            command: 'custom'
            custom: 'workload'
            arguments: 'restore'

        - task: DotNetCoreCLI@2
          displayName: 'Install MAUI Workloads'
          inputs:
            command: 'custom'
            custom: 'workload'
            arguments: 'install maui maui-android'

# Stage 3 - BUILD
- stage: Build
  dependsOn: 
    - Setup
    - Versioning
  jobs:
    - job: BuildApkAndAab
      variables:
        SemVer: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.SemVer']]
        AssemblySemVer: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.AssemblySemVer']]
        AndroidVersionCode: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.AndroidVersionCode']]
      steps:
        - checkout: self

        - task: PowerShell@2
          displayName: 'Show GitVersion Variables'
          inputs:
            targetType: 'inline'
            script: |
              Write-Host "SemVer=$(SemVer)"
              Write-Host "AssemblySemVer=$(AssemblySemVer)"
              Write-Host "AndroidVersionCode=$(AndroidVersionCode)"

        - task: DotNetCoreCLI@2
          displayName: 'Restore Solution'
          inputs:
            command: 'restore'
            projects: 'Photography.sln'

        - task: MSBuild@1
          displayName: 'Build APK'
          inputs:
            solution: 'Location.Core/Location.Core.csproj'
            msbuildArchitecture: 'x64'
            configuration: '$(buildConfiguration)'
            platform: 'Any CPU'
            msbuildArguments: >
              /t:Build
              /p:TargetFramework=net9.0-android
              /p:OutputPath=$(outputDir)-apk
              /p:Version=$(SemVer)
              /p:AssemblyVersion=$(AssemblySemVer)
              /p:FileVersion=$(AssemblySemVer)
              /p:InformationalVersion=$(SemVer)
              /p:AndroidVersionCode=$(AndroidVersionCode)
              /p:NuGetVersion=$(SemVer)
              /p:DefineConstants="PHOTOGRAPHY"

        - task: MSBuild@1
          displayName: 'Build AAB'
          inputs:
            solution: 'Location.Core/Location.Core.csproj'
            msbuildArchitecture: 'x64'
            configuration: '$(buildConfiguration)'
            platform: 'Any CPU'
            msbuildArguments: >
              /t:Build
              /p:TargetFramework=net9.0-android
              /p:OutputPath=$(outputDir)-aab
              /p:AndroidPackageFormat=aab
              /p:Version=$(SemVer)
              /p:AssemblyVersion=$(AssemblySemVer)
              /p:FileVersion=$(AssemblySemVer)
              /p:InformationalVersion=$(SemVer)
              /p:AndroidVersionCode=$(AndroidVersionCode)
              /p:NuGetVersion=$(SemVer)
              /p:DefineConstants="PHOTOGRAPHY"

- stage: Publish
  dependsOn:
    - Build
  condition: succeeded()
  variables:
    SemVer: $[stageDependencies.Versioning.GitVersion.outputs['SetGitVersionVars.SemVer']]
  jobs:
    - job: PublishArtifacts
      steps:

        - task: PowerShell@2
          displayName: 'Authenticate with Azure DevOps'
          inputs:
            targetType: 'inline'
            script: |
              az extension add --name azure-devops
              echo "$(MY_PAT)" | az devops login
              az devops configure --defaults organization=https://dev.azure.com/$(organization)
          env:
            AZURE_DEVOPS_EXT_PAT: $(MY_PAT)

        - task: PowerShell@2
          displayName: 'Ensure APK Feed Exists'
          inputs:
            targetType: 'inline'
            script: |
              $feedName = "$(apksFeed)"
              $existing = az artifacts feed list --query "[?name=='$feedName']"
              if (-not $existing) {
                Write-Host "Creating feed '$feedName'..."
                az artifacts feed create --name $feedName
              } else {
                Write-Host "Feed '$feedName' already exists."
              }
          env:
            AZURE_DEVOPS_EXT_PAT: $(MY_PAT)

        - task: PowerShell@2
          displayName: 'Ensure AAB Feed Exists'
          inputs:
            targetType: 'inline'
            script: |
              $feedName = "$(aabsFeed)"
              $existing = az artifacts feed list --query "[?name=='$feedName']"
              if (-not $existing) {
                Write-Host "Creating feed '$feedName'..."
                az artifacts feed create --name $feedName
              } else {
                Write-Host "Feed '$feedName' already exists."
              }
          env:
            AZURE_DEVOPS_EXT_PAT: $(MY_PAT)

        - task: PowerShell@2
          displayName: 'Publish APK to apks Feed'
          inputs:
            targetType: 'inline'
            script: |
              $apkPath = "$(outputDir)-apk"
              if (-Not (Test-Path $apkPath)) {
                Write-Error "APK output path does not exist: $apkPath"
                exit 1
              }
              az artifacts universal publish `
                --feed "$(apksFeed)" `
                --name "location-core-apk" `
                --version "$(SemVer)" `
                --path "$apkPath"
          env:
            AZURE_DEVOPS_EXT_PAT: $(MY_PAT)

        - task: PowerShell@2
          displayName: 'Publish AAB to aabs Feed'
          inputs:
            targetType: 'inline'
            script: |
              $aabPath = "$(outputDir)-aab"
              if (-Not (Test-Path $aabPath)) {
                Write-Error "AAB output path does not exist: $aabPath"
                exit 1
              }
              az artifacts universal publish `
                --feed "$(aabsFeed)" `
                --name "location-core-aab" `
                --version "$(SemVer)" `
                --path "$aabPath"
          env:
            AZURE_DEVOPS_EXT_PAT: $(MY_PAT)
